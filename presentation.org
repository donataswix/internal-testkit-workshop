#+TITLE: From 0 to Component Testing Hero
#+AUTHOR: Donatas Petrauskas <donatasp@wix.com>
#+DATE: <2018-06-21 Thu>

=git clone https://github.com/dop/internal-testkit-workshop=

* Part I: HISTORY
* It all started with a hackathon

- How to test components?
* State of the art @ Wix

- component tests with phantomjs
- jsdom
- enzyme already used by inbox
* Enzyme

- Shallow
- PropTypes does not fail tests
- No React lifecycle


- In the end still need integration tests!
* React Test Renderer

- Full render
- All lifecycle hooks


- How to test component as unit?
* Quick example
#+BEGIN_SRC jsx
import TestRenderer from 'react-test-renderer';

function Link(props) {
  return <a href={props.page}>{props.children}</a>;
}

const testRenderer = TestRenderer.create(
  <Link page="https://www.facebook.com/">Facebook</Link>
);

testRenderer.toJSON() =>
{ type: 'a',
  props: { href: 'https://www.facebook.com/' },
  children: [ 'Facebook' ]
}
#+END_SRC
* Part II: REACT TEST RENDERER

https://reactjs.org/docs/test-renderer.html

Open file:part-1/src/react-test-renderer.spec.js
* Snapshot testing

- Fast to start
- Very integrating in nature
- Dubious long term maintenance value

- Open file:part-1/src/snapshots.spec.js
* But what about TDD?

- Building components gradually
- Assertions on parts of tree
* Part III: TEST DRIVERS

- Query
- Encapsulate
- Compose
* Queries

- Assert on parts of component
- Filter / Find
* Encapsulation

- Get component
#+BEGIN_SRC javascript
drv.findByID('PROFILE_SCREEN.USER_PICTURE')
drv.getProfilePicture();
#+END_SRC

- Perform action
#+BEGIN_SRC javascript
drv.findByID('PROFILE_SCREEN.USER_PICTURE').props.onPress();
drv.tapProfilePicture();
#+END_SRC

* Nested (composable) drivers

- Integration testing

* Hands On

=npm i clubs-testkit=
